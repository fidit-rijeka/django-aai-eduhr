"""
Django settings for django_aai_integration project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

import environ
import saml2

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

env = environ.Env(
    DEBUG=(bool, True),

    ALLOWED_HOSTS=(str, '127.0.0.1,localhost'),
    BASE_URL=(str, 'http://localhost:8000'),

    XMLSEC_BINARY=(str, '/usr/bin/xmlsec1'),

    AAI_EDUHR_FEDLAB=(bool, True),

    LOG_LEVEL=(str, 'DEBUG'),
    LOG_LEVEL_REQUEST=(str, 'DEBUG'),
    LOG_LEVEL_DATABASE=(str, 'WARNING'),
    LOG_VERBOSE=(bool, False),
    LOG_DIR=(str, os.path.join(BASE_DIR, 'logs')),
    LOG_NAME=(str, 'aaieduhr.log'),
    LOG_NAME_SAML=(str, 'saml.log'),
    LOG_MAX_SIZE=(int, 5 * 1024 * 1024),  # 5 MiB
    LOG_BACKUP_COUNT=(int, 3)
)
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env('ALLOWED_HOSTS').split(',')

# Application definition

INSTALLED_APPS = [
    'aai_integration',
    'django_aai_eduhr',
    'djangosaml2',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'djangosaml2.middleware.SamlSessionMiddleware'
]

ROOT_URLCONF = 'django_aai_integration.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_aai_integration.wsgi.application'

BASE_URL = env('BASE_URL')

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication

AUTHENTICATION_BACKENDS = (
    # 'django.contrib.auth.backends.ModelBackend',
    'django_aai_eduhr.backends.AAIBackend',
)

LOGIN_URL = '/aai/login/'
LOGOUT_REDIRECT_URL = '/'

# SAML

SAML_DEFAULT_BINDING = saml2.BINDING_HTTP_POST
SAML_LOGOUT_REQUEST_PREFERRED_BINDING = saml2.BINDING_HTTP_REDIRECT

if env('AAI_EDUHR_FEDLAB'):
    AAI_METADATA_URL = 'https://fed-lab.aaiedu.hr/sso/saml2/idp/metadata.php'
else:
    AAI_METADATA_URL = 'https://login.aaiedu.hr/sso/saml2/idp/metadata.php'

SAML_CONFIG = {
    'debug': env('DEBUG'),

    'xmlsec_binary': env('XMLSEC_BINARY'),
    'crypto_backend': 'xmlsec1',

    'entityid': '{}/aai/metadata/'.format(BASE_URL),

    'service': {
        'sp': {
            'endpoints': {
                'assertion_consumer_service': ['{}/aai/acs/'.format(BASE_URL)],
                'single_logout_service': ['{}/aai/ls/'.format(BASE_URL)],
            },

            'want_assertions_signed': False,
            'want_response_signed': False,
            'authn_requests_signed': False,
            'logout_requests_signed': False,

            'allow_unsolicited': False,
            # 'allow_unsolicited': True,
        },
    },

    'metadata': {
        'remote': [
            {
                'url': AAI_METADATA_URL,
            }
        ]
    },

    'key_file': os.path.join(BASE_DIR, 'django_aai_integration', 'certificate', 'aaieduhr.local.key'),
    'cert_file': os.path.join(BASE_DIR, 'django_aai_integration', 'certificate', 'aaieduhr.local.crt'),
    'encryption_keypairs': [
        {
            'key_file': os.path.join(BASE_DIR, 'django_aai_integration', 'certificate', 'aaieduhr.local.key'),
            'cert_file': os.path.join(BASE_DIR, 'django_aai_integration', 'certificate', 'aaieduhr.local.crt'),
        }
    ],

    'attribute_map_dir': os.path.join(BASE_DIR, 'django_aai_eduhr'),
    'name': 'My custom application.',

    'description': 'My custom application does something rad.',

    'organization': {
        'name': [
            ('The X-Files Project', 'en'),
            ('Projekt Dosjei X', 'hr')
        ],
        'display_name': [
            ('The X-Files', 'en'),
            ('Dosjei X', 'hr')
        ],
        'url': [
            ('http://xfiles.com', 'en'),
            ('http://hr.xfiles.com', 'hr'),
        ],
    },

    'contact_person': [
        {
            'given_name': 'Fox',
            'sur_name': 'Mulder',

            'company': 'The X-Files',
            'email_address': ['fmulder@xfiles.com'],
            'telephone_number': ['+1 234 567 89'],

            # accepted values: technical, support, administrative, billing and other
            'contact_type': 'technical',

        },
        {
            'given_name': 'Dana',
            'sur_name': 'Scully',

            'company': 'The X-Files',
            'email_address': ['dscully@xfiles.com'],
            'telephone_number': ['123-456-789'],

            'contact_type': 'administrative',
        },
    ],
}

# Django SAML

SAML_SESSION_COOKIE_SAMESITE = 'None'

SESSION_COOKIE_SECURE = True
SESSION_COOKIE_DOMAIN = env.url('BASE_URL').netloc.split(':')[0]  # remove port

SAML_IGNORE_LOGOUT_ERRORS = True

SAML_DJANGO_USER_MAIN_ATTRIBUTE_LOOKUP = '__iexact'

SAML_CREATE_UNKNOWN_USER = True

SAML_ATTRIBUTE_MAPPING = {
    'hrEduPersonUniqueID': ('username',),
    'mail': ('email', ),
    'givenName': ('first_name',),
    'sn': ('last_name',),
    'o': ('aai.organisation_name',)
}

ACS_DEFAULT_REDIRECT_URL = '/'
LOGIN_REDIRECT_URL = '/'

# AAI@EduHr

AAI_MODEL = 'aai_integration.AAIData'
AAI_MODEL_RELATED_NAME = 'aai'

AAI_BACKEND_AUTHORISATION = {
    'hrEduPersonPrimaryAffiliation': ['djelatnik'],
    'o': ['Fed-lab']
}
AAI_BACKEND_POLICY = 'any'

# Logging

LOG_FILE = os.path.join(env('LOG_DIR'), env('LOG_NAME'))
LOG_FILE_SAML = os.path.join(env('LOG_DIR'), env('LOG_NAME_SAML'))
LOG_HANDLERS = ['verbose' if env('LOG_VERBOSE') else 'simple', 'console']

if not os.path.exists(env('LOG_DIR')):
    os.makedirs(env('LOG_DIR'))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} [{levelname}] {pathname}::{name}.{funcName} processName: {message}',
            'style': '{',
        },
        'simple': {
            'format': '{asctime} [{levelname}] {name}.{funcName}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'verbose': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE,
            'maxBytes': env('LOG_MAX_SIZE'),
            'backupCount': env('LOG_BACKUP_COUNT'),
            'formatter': 'verbose',
        },
        'simple': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE,
            'maxBytes': env('LOG_MAX_SIZE'),
            'backupCount': env('LOG_BACKUP_COUNT'),
            'formatter': 'simple',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'saml': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE_SAML,
            'maxBytes': env('LOG_MAX_SIZE'),
            'backupCount': env('LOG_BACKUP_COUNT'),
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': LOG_HANDLERS,
            'level': env('LOG_LEVEL'),
        },
        'django.request': {
            'handlers': LOG_HANDLERS,
            'level': env('LOG_LEVEL_REQUEST'),
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': LOG_HANDLERS,
            'level': env('LOG_LEVEL_DATABASE'),
            'propagate': False,
        },
        'django.utils.autoreload': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },

        'djangosaml2': {
            'handlers': ['saml', 'console'],
            'level': env('LOG_LEVEL'),
            'propagate': False,
        },
        'saml2': {
            'handlers': ['saml', 'console'],
            'level': env('LOG_LEVEL'),
            'propagate': False,
        },

        'django_aai_eduhr': {
            'handlers': LOG_HANDLERS,
            'level': env('LOG_LEVEL'),
            'propagate': False,
        },

        'aai_integration': {
            'handlers': LOG_HANDLERS,
            'level': env('LOG_LEVEL'),
            'propagate': False,
        },
    }
}
